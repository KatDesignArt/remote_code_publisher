<html>
<head>
   <link rel = "stylesheet" href ="..\stylesheet.css">
   <script src="..\javascript.js"></script>
</head>
<body>
<pre><hr /><div class="indent" >
<h4>Dependencies:</h4>
<a href=Cpp11-BlockingQueue.h.htm>Cpp11-BlockingQueue.h</a>
</div>
  <hr />
 <pre>
///////////////////////////////////////////////////////////////
// Cpp11-BlockingQueue.cpp - Thread-safe Blocking Queue      //
// ver 1.4                                                   //
// Jim Fawcett, CSE687 - Object Oriented Design, Spring 2013 //
///////////////////////////////////////////////////////////////

#include &lt;condition_variable&gt;
#include &lt;mutex&gt;
#include &lt;thread&gt;
#include &lt;queue&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include "Cpp11-BlockingQueue.h"

#ifdef TEST_BLOCKINGQUEUE

using namespace Async;

std::mutex ioLock;

void test(BlockingQueue&lt;std::string&gt;* pQ)
{
<input onclick="expand_collapse(simplediv1294.id, this.id)" type="button" value=" ^ " id="myButton1294" /><div id="simplediv1294" style="display:block; ">
  std::string msg;
  do
  {
<input onclick="expand_collapse(simplediv1295.id, this.id)" type="button" value=" ^ " id="myButton1295" /><div id="simplediv1295" style="display:block; ">
    msg = pQ-&gt;deQ();
    {
<input onclick="expand_collapse(simplediv1296.id, this.id)" type="button" value=" ^ " id="myButton1296" /><div id="simplediv1296" style="display:block; ">
      std::lock_guard&lt;std::mutex&gt; l(ioLock);
      std::cout &lt;&lt; "\n  thread deQed " &lt;&lt; msg.c_str();
    }</div>
    std::this_thread::sleep_for(std::chrono::milliseconds(10));
  }</div> while(msg != "quit");
}</div>

int main()
{
<input onclick="expand_collapse(simplediv1297.id, this.id)" type="button" value=" ^ " id="myButton1297" /><div id="simplediv1297" style="display:block; ">
  std::cout &lt;&lt; "\n  Demonstrating C++11 Blocking Queue";
  std::cout &lt;&lt; "\n ====================================";

  BlockingQueue&lt;std::string&gt; q;
  std::thread t(test, &q);

  for(int i=0; i&lt;15; ++i)
  {
<input onclick="expand_collapse(simplediv1298.id, this.id)" type="button" value=" ^ " id="myButton1298" /><div id="simplediv1298" style="display:block; ">
    std::ostringstream temp;
    temp &lt;&lt; i;
    std::string msg = std::string("msg#") + temp.str();
    {
<input onclick="expand_collapse(simplediv1299.id, this.id)" type="button" value=" ^ " id="myButton1299" /><div id="simplediv1299" style="display:block; ">
      std::lock_guard&lt;std::mutex&gt; l(ioLock);
      std::cout &lt;&lt; "\n   main enQing " &lt;&lt; msg.c_str();
    }</div>
    q.enQ(msg);
    std::this_thread::sleep_for(std::chrono::milliseconds(3));
  }</div>
  q.enQ("quit");
  t.join();

  std::cout &lt;&lt; "\n";
  std::cout &lt;&lt; "\n  Making move copy of BlockingQueue";
  std::cout &lt;&lt; "\n -----------------------------------";

  std::string msg = "test";
  q.enQ(msg);
  std::cout &lt;&lt; "\n  before move:";
  std::cout &lt;&lt; "\n    q.size() = " &lt;&lt; q.size();
  std::cout &lt;&lt; "\n    q.front() = " &lt;&lt; q.front();
  BlockingQueue&lt;std::string&gt; q2 = std::move(q);  // move assignment
  std::cout &lt;&lt; "\n  after move:";
  std::cout &lt;&lt; "\n    q2.size() = " &lt;&lt; q2.size();
  std::cout &lt;&lt; "\n    q.size() = " &lt;&lt; q.size();
  std::cout &lt;&lt; "\n    q2 element = " &lt;&lt; q2.deQ() &lt;&lt; "\n";

  std::cout &lt;&lt; "\n  Move assigning state of BlockingQueue";
  std::cout &lt;&lt; "\n ---------------------------------------";
  BlockingQueue&lt;std::string&gt; q3;
  q.enQ("test");
  std::cout &lt;&lt; "\n  before move:";
  std::cout &lt;&lt; "\n    q.size() = " &lt;&lt; q.size();
  std::cout &lt;&lt; "\n    q.front() = " &lt;&lt; q.front();
  q3 = std::move(q);
  std::cout &lt;&lt; "\n  after move:";
  std::cout &lt;&lt; "\n    q.size() = " &lt;&lt; q.size();
  std::cout &lt;&lt; "\n    q3.size() = " &lt;&lt; q3.size();
  std::cout &lt;&lt; "\n    q3 element = " &lt;&lt; q3.deQ() &lt;&lt; "\n";

  std::cout &lt;&lt; "\n\n";
}</div>

#endif
</pre>
</body>
</html>
