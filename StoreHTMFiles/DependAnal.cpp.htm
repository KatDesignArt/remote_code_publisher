<html>
<head>
   <link rel = "stylesheet" href ="..\stylesheet.css">
   <script src="..\javascript.js"></script>
</head>
<body>
<pre><hr /><div class="indent" >
<h4>Dependencies:</h4>
<a href=Executive.h.htm>Executive.h</a>
<a href=DependAnal.h.htm>DependAnal.h</a>
</div>
  <hr />
 <pre>
/////////////////////////////////////////////////////////////////////
// DependAnal.cpp - Store the type information needed for          //
//                  dependency between the files                   //
// ver 1.0                                                         //
//-----------------------------------------------------------------//
// Jashwanth Reddy Gangula (c) copyright 2015                      //
// All rights granted provided this copyright notice is retained   //
//-----------------------------------------------------------------//
// Language:    C++, Visual Studio 2015                            //
// Application: TYpe Based Dependency Analysis                     //
//              CSE687 - Object Oriented Design                    //
// Author:      Jashwanth Reddy Gangula, Syracuse University       //
//              jgangula@syr.edu                                   //
/////////////////////////////////////////////////////////////////////

// This cpp file implements all the declarations in header files 
// of DependAnal.h

#include "DependAnal.h"
#include "../FileSystem/FileSystem.h"
#include "../Parser/Parser.h"
#include &lt;vector&gt;
#include &lt;sstream&gt;

using namespace CodeAnalysis;
void DependAnal::displayGraphWithDependencies()
{
<input onclick="expand_collapse(simplediv1306.id, this.id)" type="button" value=" ^ " id="myButton1306" /><div id="simplediv1306" style="display:block; ">
	dependDisplay_.show(dependGraph_);
}</div>

void DependAnal::addVerticesToGraph()
{
<input onclick="expand_collapse(simplediv1307.id, this.id)" type="button" value=" ^ " id="myButton1307" /><div id="simplediv1307" style="display:block; ">
	static int i = 0;
	for (auto item : fileMap_)
	{
<input onclick="expand_collapse(simplediv1308.id, this.id)" type="button" value=" ^ " id="myButton1308" /><div id="simplediv1308" style="display:block; ">
		for (auto file : item.second)
		{
<input onclick="expand_collapse(simplediv1309.id, this.id)" type="button" value=" ^ " id="myButton1309" /><div id="simplediv1309" style="display:block; ">
			Vertex&lt;std::string, std::string&gt; vert(file, i);
			if (dependGraph_.addVertex(vert) == true)
			{
<input onclick="expand_collapse(simplediv1310.id, this.id)" type="button" value=" ^ " id="myButton1310" /><div id="simplediv1310" style="display:block; ">
				i++;
			}</div>
		}</div>
	}</div>

}</div>

void DependAnal::addDependencyToGraph(const std::string &fileName1_, const std::string &fileName2_)
{
<input onclick="expand_collapse(simplediv1311.id, this.id)" type="button" value=" ^ " id="myButton1311" /><div id="simplediv1311" style="display:block; ">
	static int i = 0;
	int index1 = -1;
	int index2 = -1;
	for (size_t j = 0; j &lt; dependGraph_.size(); j++)
	{
<input onclick="expand_collapse(simplediv1312.id, this.id)" type="button" value=" ^ " id="myButton1312" /><div id="simplediv1312" style="display:block; ">
		Vertex&lt;std::string, std::string&gt;& v1 = dependGraph_[j];
		if (v1.value() == fileName1_)
		{
<input onclick="expand_collapse(simplediv1313.id, this.id)" type="button" value=" ^ " id="myButton1313" /><div id="simplediv1313" style="display:block; ">
			index1 = (int)j;
		}</div>
		if (v1.value() == fileName2_)
		{
<input onclick="expand_collapse(simplediv1314.id, this.id)" type="button" value=" ^ " id="myButton1314" /><div id="simplediv1314" style="display:block; ">
			index2 = (int)j;
		}</div>
	}</div>

	std::stringstream ss;
	ss.str("");
	ss &lt;&lt; "edge" &lt;&lt; i;
	if ((index1 != -1) && (index2 != -1))
	{
<input onclick="expand_collapse(simplediv1315.id, this.id)" type="button" value=" ^ " id="myButton1315" /><div id="simplediv1315" style="display:block; ">
		if (dependGraph_.addEdge(ss.str(), dependGraph_[index1], dependGraph_[index2]) == true)
		{
<input onclick="expand_collapse(simplediv1316.id, this.id)" type="button" value=" ^ " id="myButton1316" /><div id="simplediv1316" style="display:block; ">
			i++;
		}</div>
	}</div>
}</div>


/*
* Arguments are:
* - path: possibly relative path to folder containing all analyzed code,
*   e.g., may be anywhere in the directory tree rooted at that path
* - patterns: one or more file patterns of the form *.h, *.cpp, and *.cs
* - options: /m (show metrics), /s (show file sizes), and /a (show AST)
*/


bool DependAnal::Attach(const std::string& name)
{
<input onclick="expand_collapse(simplediv1317.id, this.id)" type="button" value=" ^ " id="myButton1317" /><div id="simplediv1317" style="display:block; ">
	if (pToker == 0)
		return false;
	if (pIn != nullptr)
	{
<input onclick="expand_collapse(simplediv1318.id, this.id)" type="button" value=" ^ " id="myButton1318" /><div id="simplediv1318" style="display:block; ">
		pIn-&gt;close();
		delete pIn;
	}</div>
	pIn = new std::ifstream(name);
	if (!pIn-&gt;good())
		return false;

	// check for Byte Order Mark (BOM)
	char a, b, c;
	a = pIn-&gt;get();
	b = pIn-&gt;get();
	c = pIn-&gt;get();
	if (a != (char)0xEF || b != (char)0xBB || c != (char)0xBF)
		pIn-&gt;seekg(0);

	if (!pIn-&gt;good())
	{
<input onclick="expand_collapse(simplediv1319.id, this.id)" type="button" value=" ^ " id="myButton1319" /><div id="simplediv1319" style="display:block; ">
		// empty file, but openable, so return true, avoids error message
		return true;
	}</div>
	return pToker-&gt;attach(pIn);
}</div>


bool DependAnal::ProcessCommandLine(int argc, char* argv[])
{
<input onclick="expand_collapse(simplediv1320.id, this.id)" type="button" value=" ^ " id="myButton1320" /><div id="simplediv1320" style="display:block; ">
	if (argc &lt; 2)
	{
<input onclick="expand_collapse(simplediv1321.id, this.id)" type="button" value=" ^ " id="myButton1321" /><div id="simplediv1321" style="display:block; ">
		return false;
	}</div>
	try {
<input onclick="expand_collapse(simplediv1322.id, this.id)" type="button" value=" ^ " id="myButton1322" /><div id="simplediv1322" style="display:block; ">
		path_ = FileSystem::Path::getFullFileSpec(argv[1]);
		if (!FileSystem::Directory::exists(path_))
		{
<input onclick="expand_collapse(simplediv1323.id, this.id)" type="button" value=" ^ " id="myButton1323" /><div id="simplediv1323" style="display:block; ">
			std::cout &lt;&lt; "\n\n  path \"" &lt;&lt; path_ &lt;&lt; "\" does not exist\n\n";
			return false;
		}</div>
	/*	Utilities::StringHelper::Title("Requirement8 is met: Processing the source code based on arguments");
		for (int i = 0; i &lt; argc; i++)
		{
<input onclick="expand_collapse(simplediv1324.id, this.id)" type="button" value=" ^ " id="myButton1324" /><div id="simplediv1324" style="display:block; ">
			cout &lt;&lt; endl &lt;&lt; "Argument " &lt;&lt; i &lt;&lt; ": " &lt;&lt; argv[i];
		}</div>*/
		for (int i = 2; i &lt; argc; ++i)
		{
<input onclick="expand_collapse(simplediv1325.id, this.id)" type="button" value=" ^ " id="myButton1325" /><div id="simplediv1325" style="display:block; ">
			if (argv[i][0] == '/')
				options_.push_back(argv[i][1]);
			else
				patterns_.push_back(argv[i]);
		}</div>
		if (patterns_.size() == 0)
		{
<input onclick="expand_collapse(simplediv1326.id, this.id)" type="button" value=" ^ " id="myButton1326" /><div id="simplediv1326" style="display:block; ">
			return false;
		}</div>
	}</div>
	catch (std::exception& ex)
	{
<input onclick="expand_collapse(simplediv1327.id, this.id)" type="button" value=" ^ " id="myButton1327" /><div id="simplediv1327" style="display:block; ">
		std::cout &lt;&lt; "\n\n  command line argument parsing error:";
		std::cout &lt;&lt; "\n  " &lt;&lt; ex.what() &lt;&lt; "\n\n";
		return false;
	}</div>
	/*Utilities::StringHelper::Title("Processed all the files in the directory path provided");
	Utilities::StringHelper::Title("All the files with matching patterns were processed");*/
	//if (argc &lt;= 6)
	//{
<input onclick="expand_collapse(simplediv1328.id, this.id)" type="button" value=" ^ " id="myButton1328" /><div id="simplediv1328" style="display:block; ">
	//	Utilities::StringHelper::Title("Default files to store xml for dependency analysis is : storedependency.xml");
	//}</div>
	//else
	//{
<input onclick="expand_collapse(simplediv1329.id, this.id)" type="button" value=" ^ " id="myButton1329" /><div id="simplediv1329" style="display:block; ">
	//    string dependfile = "File provided to store the dependecy in xml format is: ";
	//	dependfile.append(argv[6]);
	//	Utilities::StringHelper::Title(dependfile);
	//}</div>
	//Utilities::StringHelper::Title("End of Requirement 8");
	return true;
}</div>
void DependAnal::getSourceFiles()
{
<input onclick="expand_collapse(simplediv1330.id, this.id)" type="button" value=" ^ " id="myButton1330" /><div id="simplediv1330" style="display:block; ">
	AnalFileMgr fm(path_, fileMap_);
	for (auto patt : patterns_)
		fm.addPattern(patt);
	fm.search();
}</div>
void DependAnal::processSourceCode()
{
<input onclick="expand_collapse(simplediv1331.id, this.id)" type="button" value=" ^ " id="myButton1331" /><div id="simplediv1331" style="display:block; ">
	addVerticesToGraph();
	for (auto item : fileMap_)
	{
<input onclick="expand_collapse(simplediv1332.id, this.id)" type="button" value=" ^ " id="myButton1332" /><div id="simplediv1332" style="display:block; ">
		for (auto file : item.second)
		{
<input onclick="expand_collapse(simplediv1333.id, this.id)" type="button" value=" ^ " id="myButton1333" /><div id="simplediv1333" style="display:block; ">
			Attach(file);
			std::string fileName_;
			if (file.find_last_of("\\") &lt; file.length())
			{
<input onclick="expand_collapse(simplediv1334.id, this.id)" type="button" value=" ^ " id="myButton1334" /><div id="simplediv1334" style="display:block; ">
				fileName_ = file.substr(file.find_last_of("\\") + 1);
			}</div>
			while (pParser-&gt;next())
			{
<input onclick="expand_collapse(simplediv1335.id, this.id)" type="button" value=" ^ " id="myButton1335" /><div id="simplediv1335" style="display:block; ">
				std::vector&lt;std::string&gt;::iterator it = pSemi-&gt;begin();
				for (it; it != pSemi-&gt;end(); it++)
				{
<input onclick="expand_collapse(simplediv1336.id, this.id)" type="button" value=" ^ " id="myButton1336" /><div id="simplediv1336" style="display:block; ">
					/* check if the token is present in the TypeTable */
					if (typeTable_.getTypeTable().find(*it) != typeTable_.getTypeTable().end())
					{
<input onclick="expand_collapse(simplediv1337.id, this.id)" type="button" value=" ^ " id="myButton1337" /><div id="simplediv1337" style="display:block; ">
						if (file != typeTable_.getTypeTable().find(*it)-&gt;second.filename)
						{
<input onclick="expand_collapse(simplediv1338.id, this.id)" type="button" value=" ^ " id="myButton1338" /><div id="simplediv1338" style="display:block; ">
							if (dependMap_[file].insert(typeTable_.getTypeTable().find(*it)-&gt;second.filename).second 
								!= false)
							{
<input onclick="expand_collapse(simplediv1339.id, this.id)" type="button" value=" ^ " id="myButton1339" /><div id="simplediv1339" style="display:block; ">
								std::string fileName2_ = typeTable_.getTypeTable().find(*it)-&gt;second.filename;
								addDependencyToGraph(file, fileName2_);
								std::string str1 = file.substr(file.find_last_of("\\") + 1);
								std::string str2 = fileName2_.substr(fileName2_.find_last_of("\\") + 1);
								if ((str1.find_last_of(".cpp") &lt; str1.length()) 
									&& (str2.find_last_of(".h") &lt; str2.length()))
								{
<input onclick="expand_collapse(simplediv1340.id, this.id)" type="button" value=" ^ " id="myButton1340" /><div id="simplediv1340" style="display:block; ">
									if (str1.substr(0, str1.find_last_of(".cpp") - 4).compare
									(str2.substr(0, str2.find_last_of(".h") - 2)) == 0)
									{
<input onclick="expand_collapse(simplediv1341.id, this.id)" type="button" value=" ^ " id="myButton1341" /><div id="simplediv1341" style="display:block; ">
										dependMap_[fileName2_].insert(file);
										addDependencyToGraph(fileName2_, file);
									}</div>
								}</div>
								
							}</div>
						}</div>
					}</div>
				}</div>
			}</div>
		}</div>
	}</div>
	Utilities::StringHelper::Title("Processed the Source code and added the dependencies to graph class and dependency table");
}</div>

#ifdef TEST_DEPENDANAL
int main()
{
<input onclick="expand_collapse(simplediv1342.id, this.id)" type="button" value=" ^ " id="myButton1342" /><div id="simplediv1342" style="display:block; ">
	return 0;
}</div>
#endif</pre>
</body>
</html>
