<html>
<head>
   <link rel = "stylesheet" href ="..\stylesheet.css">
   <script src="..\javascript.js"></script>
</head>
<body>
<pre><hr /><div class="indent" >
<h4>Dependencies:</h4>
<a href=Executive.h.htm>Executive.h</a>
<a href=DependAnal.h.htm>DependAnal.h</a>
</div>
  <hr />
 <pre>
/////////////////////////////////////////////////////////////////////
// DependAnal.cpp - Store the type information needed for          //
//                  dependency between the files                   //
// ver 1.0                                                         //
//-----------------------------------------------------------------//
// Jashwanth Reddy Gangula (c) copyright 2015                      //
// All rights granted provided this copyright notice is retained   //
//-----------------------------------------------------------------//
// Language:    C++, Visual Studio 2015                            //
// Application: TYpe Based Dependency Analysis                     //
//              CSE687 - Object Oriented Design                    //
// Author:      Jashwanth Reddy Gangula, Syracuse University       //
//              jgangula@syr.edu                                   //
/////////////////////////////////////////////////////////////////////

// This cpp file implements all the declarations in header files 
// of DependAnal.h

#include "DependAnal.h"
#include "../FileSystem/FileSystem.h"
#include "../Parser/Parser.h"
#include &lt;vector&gt;
#include &lt;sstream&gt;

using namespace CodeAnalysis;
void DependAnal::displayGraphWithDependencies()
{
<input onclick="expand_collapse(simplediv602.id, this.id)" type="button" value=" ^ " id="myButton602" /><div id="simplediv602" style="display:block; ">
	dependDisplay_.show(dependGraph_);
}</div>

void DependAnal::addVerticesToGraph()
{
<input onclick="expand_collapse(simplediv603.id, this.id)" type="button" value=" ^ " id="myButton603" /><div id="simplediv603" style="display:block; ">
	static int i = 0;
	for (auto item : fileMap_)
	{
<input onclick="expand_collapse(simplediv604.id, this.id)" type="button" value=" ^ " id="myButton604" /><div id="simplediv604" style="display:block; ">
		for (auto file : item.second)
		{
<input onclick="expand_collapse(simplediv605.id, this.id)" type="button" value=" ^ " id="myButton605" /><div id="simplediv605" style="display:block; ">
			Vertex&lt;std::string, std::string&gt; vert(file, i);
			if (dependGraph_.addVertex(vert) == true)
			{
<input onclick="expand_collapse(simplediv606.id, this.id)" type="button" value=" ^ " id="myButton606" /><div id="simplediv606" style="display:block; ">
				i++;
			}</div>
		}</div>
	}</div>

}</div>

void DependAnal::addDependencyToGraph(const std::string &fileName1_, const std::string &fileName2_)
{
<input onclick="expand_collapse(simplediv607.id, this.id)" type="button" value=" ^ " id="myButton607" /><div id="simplediv607" style="display:block; ">
	static int i = 0;
	int index1 = -1;
	int index2 = -1;
	for (size_t j = 0; j &lt; dependGraph_.size(); j++)
	{
<input onclick="expand_collapse(simplediv608.id, this.id)" type="button" value=" ^ " id="myButton608" /><div id="simplediv608" style="display:block; ">
		Vertex&lt;std::string, std::string&gt;& v1 = dependGraph_[j];
		if (v1.value() == fileName1_)
		{
<input onclick="expand_collapse(simplediv609.id, this.id)" type="button" value=" ^ " id="myButton609" /><div id="simplediv609" style="display:block; ">
			index1 = (int)j;
		}</div>
		if (v1.value() == fileName2_)
		{
<input onclick="expand_collapse(simplediv610.id, this.id)" type="button" value=" ^ " id="myButton610" /><div id="simplediv610" style="display:block; ">
			index2 = (int)j;
		}</div>
	}</div>

	std::stringstream ss;
	ss.str("");
	ss &lt;&lt; "edge" &lt;&lt; i;
	if ((index1 != -1) && (index2 != -1))
	{
<input onclick="expand_collapse(simplediv611.id, this.id)" type="button" value=" ^ " id="myButton611" /><div id="simplediv611" style="display:block; ">
		if (dependGraph_.addEdge(ss.str(), dependGraph_[index1], dependGraph_[index2]) == true)
		{
<input onclick="expand_collapse(simplediv612.id, this.id)" type="button" value=" ^ " id="myButton612" /><div id="simplediv612" style="display:block; ">
			i++;
		}</div>
	}</div>
}</div>


/*
* Arguments are:
* - path: possibly relative path to folder containing all analyzed code,
*   e.g., may be anywhere in the directory tree rooted at that path
* - patterns: one or more file patterns of the form *.h, *.cpp, and *.cs
* - options: /m (show metrics), /s (show file sizes), and /a (show AST)
*/


bool DependAnal::Attach(const std::string& name)
{
<input onclick="expand_collapse(simplediv613.id, this.id)" type="button" value=" ^ " id="myButton613" /><div id="simplediv613" style="display:block; ">
	if (pToker == 0)
		return false;
	if (pIn != nullptr)
	{
<input onclick="expand_collapse(simplediv614.id, this.id)" type="button" value=" ^ " id="myButton614" /><div id="simplediv614" style="display:block; ">
		pIn-&gt;close();
		delete pIn;
	}</div>
	pIn = new std::ifstream(name);
	if (!pIn-&gt;good())
		return false;

	// check for Byte Order Mark (BOM)
	char a, b, c;
	a = pIn-&gt;get();
	b = pIn-&gt;get();
	c = pIn-&gt;get();
	if (a != (char)0xEF || b != (char)0xBB || c != (char)0xBF)
		pIn-&gt;seekg(0);

	if (!pIn-&gt;good())
	{
<input onclick="expand_collapse(simplediv615.id, this.id)" type="button" value=" ^ " id="myButton615" /><div id="simplediv615" style="display:block; ">
		// empty file, but openable, so return true, avoids error message
		return true;
	}</div>
	return pToker-&gt;attach(pIn);
}</div>


bool DependAnal::ProcessCommandLine(int argc, char* argv[])
{
<input onclick="expand_collapse(simplediv616.id, this.id)" type="button" value=" ^ " id="myButton616" /><div id="simplediv616" style="display:block; ">
	if (argc &lt; 2)
	{
<input onclick="expand_collapse(simplediv617.id, this.id)" type="button" value=" ^ " id="myButton617" /><div id="simplediv617" style="display:block; ">
		return false;
	}</div>
	try {
<input onclick="expand_collapse(simplediv618.id, this.id)" type="button" value=" ^ " id="myButton618" /><div id="simplediv618" style="display:block; ">
		path_ = FileSystem::Path::getFullFileSpec(argv[1]);
		if (!FileSystem::Directory::exists(path_))
		{
<input onclick="expand_collapse(simplediv619.id, this.id)" type="button" value=" ^ " id="myButton619" /><div id="simplediv619" style="display:block; ">
			std::cout &lt;&lt; "\n\n  path \"" &lt;&lt; path_ &lt;&lt; "\" does not exist\n\n";
			return false;
		}</div>
	/*	Utilities::StringHelper::Title("Requirement8 is met: Processing the source code based on arguments");
		for (int i = 0; i &lt; argc; i++)
		{
<input onclick="expand_collapse(simplediv620.id, this.id)" type="button" value=" ^ " id="myButton620" /><div id="simplediv620" style="display:block; ">
			cout &lt;&lt; endl &lt;&lt; "Argument " &lt;&lt; i &lt;&lt; ": " &lt;&lt; argv[i];
		}</div>*/
		for (int i = 2; i &lt; argc; ++i)
		{
<input onclick="expand_collapse(simplediv621.id, this.id)" type="button" value=" ^ " id="myButton621" /><div id="simplediv621" style="display:block; ">
			if (argv[i][0] == '/')
				options_.push_back(argv[i][1]);
			else
				patterns_.push_back(argv[i]);
		}</div>
		if (patterns_.size() == 0)
		{
<input onclick="expand_collapse(simplediv622.id, this.id)" type="button" value=" ^ " id="myButton622" /><div id="simplediv622" style="display:block; ">
			return false;
		}</div>
	}</div>
	catch (std::exception& ex)
	{
<input onclick="expand_collapse(simplediv623.id, this.id)" type="button" value=" ^ " id="myButton623" /><div id="simplediv623" style="display:block; ">
		std::cout &lt;&lt; "\n\n  command line argument parsing error:";
		std::cout &lt;&lt; "\n  " &lt;&lt; ex.what() &lt;&lt; "\n\n";
		return false;
	}</div>
	/*Utilities::StringHelper::Title("Processed all the files in the directory path provided");
	Utilities::StringHelper::Title("All the files with matching patterns were processed");*/
	//if (argc &lt;= 6)
	//{
<input onclick="expand_collapse(simplediv624.id, this.id)" type="button" value=" ^ " id="myButton624" /><div id="simplediv624" style="display:block; ">
	//	Utilities::StringHelper::Title("Default files to store xml for dependency analysis is : storedependency.xml");
	//}</div>
	//else
	//{
<input onclick="expand_collapse(simplediv625.id, this.id)" type="button" value=" ^ " id="myButton625" /><div id="simplediv625" style="display:block; ">
	//    string dependfile = "File provided to store the dependecy in xml format is: ";
	//	dependfile.append(argv[6]);
	//	Utilities::StringHelper::Title(dependfile);
	//}</div>
	//Utilities::StringHelper::Title("End of Requirement 8");
	return true;
}</div>
void DependAnal::getSourceFiles()
{
<input onclick="expand_collapse(simplediv626.id, this.id)" type="button" value=" ^ " id="myButton626" /><div id="simplediv626" style="display:block; ">
	AnalFileMgr fm(path_, fileMap_);
	for (auto patt : patterns_)
		fm.addPattern(patt);
	fm.search();
}</div>
void DependAnal::processSourceCode()
{
<input onclick="expand_collapse(simplediv627.id, this.id)" type="button" value=" ^ " id="myButton627" /><div id="simplediv627" style="display:block; ">
	addVerticesToGraph();
	for (auto item : fileMap_)
	{
<input onclick="expand_collapse(simplediv628.id, this.id)" type="button" value=" ^ " id="myButton628" /><div id="simplediv628" style="display:block; ">
		for (auto file : item.second)
		{
<input onclick="expand_collapse(simplediv629.id, this.id)" type="button" value=" ^ " id="myButton629" /><div id="simplediv629" style="display:block; ">
			Attach(file);
			std::string fileName_;
			if (file.find_last_of("\\") &lt; file.length())
			{
<input onclick="expand_collapse(simplediv630.id, this.id)" type="button" value=" ^ " id="myButton630" /><div id="simplediv630" style="display:block; ">
				fileName_ = file.substr(file.find_last_of("\\") + 1);
			}</div>
			while (pParser-&gt;next())
			{
<input onclick="expand_collapse(simplediv631.id, this.id)" type="button" value=" ^ " id="myButton631" /><div id="simplediv631" style="display:block; ">
				std::vector&lt;std::string&gt;::iterator it = pSemi-&gt;begin();
				for (it; it != pSemi-&gt;end(); it++)
				{
<input onclick="expand_collapse(simplediv632.id, this.id)" type="button" value=" ^ " id="myButton632" /><div id="simplediv632" style="display:block; ">
					/* check if the token is present in the TypeTable */
					if (typeTable_.getTypeTable().find(*it) != typeTable_.getTypeTable().end())
					{
<input onclick="expand_collapse(simplediv633.id, this.id)" type="button" value=" ^ " id="myButton633" /><div id="simplediv633" style="display:block; ">
						if (file != typeTable_.getTypeTable().find(*it)-&gt;second.filename)
						{
<input onclick="expand_collapse(simplediv634.id, this.id)" type="button" value=" ^ " id="myButton634" /><div id="simplediv634" style="display:block; ">
							if (dependMap_[file].insert(typeTable_.getTypeTable().find(*it)-&gt;second.filename).second 
								!= false)
							{
<input onclick="expand_collapse(simplediv635.id, this.id)" type="button" value=" ^ " id="myButton635" /><div id="simplediv635" style="display:block; ">
								std::string fileName2_ = typeTable_.getTypeTable().find(*it)-&gt;second.filename;
								addDependencyToGraph(file, fileName2_);
								std::string str1 = file.substr(file.find_last_of("\\") + 1);
								std::string str2 = fileName2_.substr(fileName2_.find_last_of("\\") + 1);
								if ((str1.find_last_of(".cpp") &lt; str1.length()) 
									&& (str2.find_last_of(".h") &lt; str2.length()))
								{
<input onclick="expand_collapse(simplediv636.id, this.id)" type="button" value=" ^ " id="myButton636" /><div id="simplediv636" style="display:block; ">
									if (str1.substr(0, str1.find_last_of(".cpp") - 4).compare
									(str2.substr(0, str2.find_last_of(".h") - 2)) == 0)
									{
<input onclick="expand_collapse(simplediv637.id, this.id)" type="button" value=" ^ " id="myButton637" /><div id="simplediv637" style="display:block; ">
										dependMap_[fileName2_].insert(file);
										addDependencyToGraph(fileName2_, file);
									}</div>
								}</div>
								
							}</div>
						}</div>
					}</div>
				}</div>
			}</div>
		}</div>
	}</div>
	Utilities::StringHelper::Title("Processed the Source code and added the dependencies to graph class and dependency table");
}</div>

#ifdef TEST_DEPENDANAL
int main()
{
<input onclick="expand_collapse(simplediv638.id, this.id)" type="button" value=" ^ " id="myButton638" /><div id="simplediv638" style="display:block; ">
	return 0;
}</div>
#endif</pre>
</body>
</html>
